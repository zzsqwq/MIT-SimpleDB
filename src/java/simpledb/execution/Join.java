package simpledb.execution;

import simpledb.storage.Field;
import simpledb.transaction.TransactionAbortedException;
import simpledb.common.DbException;
import simpledb.storage.Tuple;
import simpledb.storage.TupleDesc;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;

    private final JoinPredicate p_;
    private OpIterator child_1_;
    private OpIterator child_2_;

    /**
     * Constructor. Accepts two children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, OpIterator child1, OpIterator child2) {
        this.p_ = p;
        this.child_1_ = child1;
        this.child_2_ = child2;
    }

    public JoinPredicate getJoinPredicate() {
        return this.p_;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        return child_1_.getTupleDesc().getFieldName(p_.getField1());
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        return child_2_.getTupleDesc().getFieldName(p_.getField2());
    }

    /**
     * @see TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        return TupleDesc.merge(child_1_.getTupleDesc(),child_2_.getTupleDesc());
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        child_1_.open();
        child_2_.open();
        super.open();
    }

    public void close() {
        child_1_.close();
        child_2_.close();
        super.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        child_1_.rewind();
        child_2_.rewind();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    private Tuple mergeTuple(Tuple t1, Tuple t2) {

        Tuple res_tuple = new Tuple(TupleDesc.merge(child_1_.getTupleDesc(),child_2_.getTupleDesc()));
        int cnt = 0;
        Iterator<Field> fieldIterator = t1.fields();
        while(fieldIterator.hasNext()) {
            res_tuple.setField(cnt++, fieldIterator.next());
        }
        Iterator<Field >fieldIterator2 = t2.fields();
        while(fieldIterator2.hasNext()) {
            res_tuple.setField(cnt++, fieldIterator2.next());
        }
        return res_tuple;
    }
    private Tuple t = null;
    // TODO: last mistake, why
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // 二层循环，类似于冒泡
        while(child_1_.hasNext() || t!=null) {
            if(t == null) {
                t = child_1_.next();
                if(!child_2_.hasNext()) {
                    child_2_.rewind();
                }
            }
            while(child_2_.hasNext()) {
                Tuple tt = child_2_.next();
                if(p_.filter(t,tt)){
                    return mergeTuple(t,tt);
                }
            }
            t = null;
        }
        return null;
    }

    @Override
    public OpIterator[] getChildren() {
        return new OpIterator[]{child_1_,child_2_};
    }

    @Override
    public void setChildren(OpIterator[] children) {
        this.child_1_ = children[0];
        this.child_2_ = children[1];
    }

}
